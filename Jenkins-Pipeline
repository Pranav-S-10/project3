pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'rpillaiakshay/myapp'
        GITHUB_REPO = 'https://github.com/rpillaiakshay/microservices-project.git'
        AWS_REGION = 'ap-south-1'
    }

    stages {
        stage('Clone Code from GitHub') {
            steps {
                script {
                    checkout scmGit(
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[
                            credentialsId: 'GitHub',  // GitHub token credential ID
                            url: 'https://github.com/rpillaiakshay/microservices-project.git'
                        ]]
                    )
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'DockerHub')]) {
                        sh 'echo $DOCKERHUB_TOKEN | docker login -u rpillaiakshay --password-stdin'
                    }
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }

        stage('Configure AWS CLI for EKS') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'AWS_Credentials')]) {
                        sh 'aws eks --region $AWS_REGION update-kubeconfig --name micro-services'
                    }
                }
            }
        }

        stage('Deploy Backend to Kubernetes (Blue Environment)') {
            steps {
                script {
                    sh 'kubectl apply -f k8s/backend-deployment-blue.yaml'
                    sh 'kubectl apply -f k8s/backend-service.yaml'
                }
            }
        }

        stage('Deploy Backend to Kubernetes (Green Environment)') {
            steps {
                script {
                    sh 'kubectl apply -f k8s/backend-deployment-green.yaml'
                }
            }
        }

        stage('Switch Traffic to Green (Blue/Green Switch)') {
            steps {
                script {
                    sh 'kubectl apply -f k8s/ingress.yaml'
                }
            }
        }

        stage('Delete Blue Environment') {
            steps {
                script {
                    sh 'kubectl delete -f k8s/backend-deployment-blue.yaml'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    sh 'terraform init'
                    sh 'terraform apply -auto-approve'
                }
            }
        }

        stage('Prometheus and Grafana Setup') {
            steps {
                script {
                    sh 'kubectl apply -f k8s/prometheus.yaml'
                    sh 'kubectl apply -f k8s/grafana.yaml'
                }
            }
        }
    }
}
