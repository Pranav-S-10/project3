pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'rpillaiakshay/myapp'
        GITHUB_REPO = 'https://github.com/rpillaiakshay/microservices-project.git'
        AWS_REGION = 'ap-south-1'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                script {
                    // Remove any existing project directory to avoid conflicts
                    sh 'rm -rf microservices-project'
                }
            }
        }

        stage('Clone Code from GitHub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GitHub', variable: 'GITHUB_TOKEN')]) {
                        // Clone the repository with the provided GitHub token
                        sh 'git clone https://$GITHUB_TOKEN@github.com/rpillaiakshay/microservices-project.git'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image from the 'app' directory
                    sh 'docker build -t $DOCKER_IMAGE ./app'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'DockerHub', variable: 'DOCKERHUB_TOKEN')]) {
                        // Login to Docker Hub and push the image
                        sh '''
                            echo $DOCKERHUB_TOKEN | docker login -u rpillaiakshay --password-stdin
                            docker push $DOCKER_IMAGE
                        '''
                    }
                }
            }
        }

        stage('Configure AWS CLI for EKS') {
            steps {
                script {
                    withCredentials([aws(credentialsId: 'AWS_Credentials')]) {
                        // Configure the AWS CLI to connect to the EKS cluster
                        sh 'aws eks --region $AWS_REGION update-kubeconfig --name micro-services'
                    }
                }
            }
        }

        stage('Deploy Backend to Kubernetes (Blue Environment)') {
            steps {
                script {
                    // Deploy the backend to the blue environment
                    sh 'kubectl apply -f k8s/backend-deployment-blue.yaml'
                    sh 'kubectl apply -f k8s/backend-service.yaml'
                }
            }
        }

        stage('Deploy Backend to Kubernetes (Green Environment)') {
            steps {
                script {
                    // Deploy the backend to the green environment
                    sh 'kubectl apply -f k8s/backend-deployment-green.yaml'
                }
            }
        }

        stage('Switch Traffic to Green (Blue/Green Switch)') {
            steps {
                script {
                    // Switch traffic to the green environment using Ingress
                    sh 'kubectl apply -f k8s/ingress.yaml'
                }
            }
        }

        stage('Delete Blue Environment') {
            steps {
                script {
                    // Clean up by deleting the blue environment
                    sh 'kubectl delete -f k8s/backend-deployment-blue.yaml'
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    // Initialize and apply Terraform configuration
                    sh '''
                        terraform init
                        terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Prometheus and Grafana Setup') {
            steps {
                script {
                    // Set up Prometheus and Grafana for monitoring
                    sh '''
                        kubectl apply -f k8s/prometheus.yaml
                        kubectl apply -f k8s/grafana.yaml
                    '''
                }
            }
        }
    }
}
